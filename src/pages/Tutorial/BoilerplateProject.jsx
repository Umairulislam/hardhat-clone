import { useSelector } from "react-redux"
import { CodeSnippet } from "../../components"
import { boilerplate1, boilerplate2, boilerplate3 } from "../../assets"

const BoilerplateProject = () => {
  const isDarkMode = useSelector((state) => state.theme.isDarkMode)
  const snippet1 = `cd hardhat-boilerplate
npm install
npx hardhat node`

  const snippet2 = `npx hardhat run scripts/deploy.js --network localhost`

  const snippet3 = `cd frontend
npm install
npm run start`

  const snippet4 = `npx hardhat --network localhost faucet <your address>`

  const snippet5 = `$ npx hardhat --network localhost faucet 0x0987a41e73e69f60c5071ce3c8f7e730f9a60f90
Transferred 1 ETH and 100 tokens to 0x0987a41e73e69f60c5071ce3c8f7e730f9a60f90`

  const snippet6 = `eth_sendTransaction
  Contract call:       Token#transfer
  Transaction:         0x460526d98b86f7886cd0f218d6618c96d27de7c745462ff8141973253e89b7d4
  From:                0xc783df8a850f42e7f7e57013759c285caa701eb6
  To:                  0x7c2c195cd6d34b8f845992d380aadb2730bb9c6f
  Value:               0 ETH
  Gas used:            37098 of 185490
  Block #8:            0x6b6cd29029b31f30158bfbd12faf2c4ac4263068fd12b6130f5655e70d1bc257

  console.log:
    Transferring from 0xc783df8a850f42e7f7e57013759c285caa701eb6 to 0x0987a41e73e69f60c5071ce3c8f7e730f9a60f90 100 tokens`

  return (
    <section
      className={`p-6 lg:px-32 mx-auto max-w-4xl text-sm font-light flex flex-col space-y-6 ${
        isDarkMode ? "text-black" : "text-gray-300"
      } `}
    >
      <h1 className="tertiary-heading">Hardhat Boilerplate Project</h1>
      <p>
        If you want to get started with your dApp quickly or see what this whole
        project looks like with a frontend, you can use{" "}
        <span className="text-tertiary">our boilerplate repo</span>.
      </p>

      <h2 className="plugin-heading border-b-[1px] border-gray-600">
        What's included
      </h2>
      <ul className="list-disc list-inside space-y-1">
        <li>The Solidity contract we used in this tutorial</li>
        <li>Tests for the entire functionality of the contract</li>
        <li>
          A minimal React front-end to interact with the contract using
          ethers.js
        </li>
      </ul>

      <h2 className="plugin-heading">Solidity contract & tests</h2>
      <p>
        In the root of the repo you'll find the Hardhat project we put together
        through this tutorial with the Token contract. To refresh your memory on
        what it implements:
      </p>
      <ul className="list-disc list-inside space-y-1">
        <li>There is a fixed total supply of tokens that can't be changed.</li>
        <li>
          The entire supply is assigned to the address that deploys the
          contract.
        </li>
        <li>Anyone can receive tokens.</li>
        <li>Anyone with at least one token can transfer tokens.</li>
        <li>
          The token is non-divisible. You can transfer 1, 2, 3 or 37 tokens but
          not 2.5.
        </li>
      </ul>

      <h2 className="plugin-heading">Frontend app</h2>
      <p>
        In frontend you'll find a simple app that allows the user to do two
        things:
      </p>
      <ul className="list-disc list-inside space-y-1">
        <li>Check the connected wallet's balance</li>
        <li>Send tokens to an address</li>
      </ul>
      <p>
        It's a separate npm project and it was created using create-react-app,
        so this means that it uses webpack and babel.
      </p>

      <h2 className="plugin-heading">Frontend file architecture</h2>
      <ol className="list-disc list-inside space-y-1  ">
        <li>
          <strong>src/ </strong> contains all the code
          <ul className="list-disc list-inside pl-4 space-y-1">
            <li>
              <strong>src/components</strong> contains the react components
              <ul className="list-disc list-inside pl-4 space-y-1">
                <li>
                  <strong>Dapp.js</strong> is the only file with business logic.
                  This is where you'd replace the code with your own if you were
                  to use this as boilerplate
                </li>
                <li>Every other component just renders HTML, no logic.</li>
                <li>
                  <strong>src/contracts</strong> has the ABI and address of the
                  contract and these are automatically generated by the
                  deployment script
                </li>
              </ul>
            </li>
          </ul>
        </li>
      </ol>

      <h2 className="plugin-heading border-b-[1px] border-gray-600">
        How to use it
      </h2>
      <p>
        First clone the repository, and then prepare for the contract
        deployment:
      </p>
      <CodeSnippet
        code={snippet1}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>
        Here we just install the npm project's dependencies, and by running npx
        hardhat node we spin up an instance of Hardhat Network that you can
        connect to using your wallet. In a different terminal in the same
        directory, run:
      </p>
      <CodeSnippet
        code={snippet2}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>
        This will deploy the contract to Hardhat Network. After this completes,
        start the react web app:
      </p>
      <CodeSnippet
        code={snippet3}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>
        Then open <span className="text-tertiary">http://127.0.0.1:3000/</span>{" "}
        in your browser and you should see this:
      </p>
      <img src={boilerplate1} alt="boilerplate" className="border" />
      <p>Click the button to connect your wallet.</p>
      <div
        className={` border-l-8 border-[#42B983] w-full p-8 ${
          isDarkMode ? "bg-gray-200" : "bg-secondary"
        }`}
      >
        <h1>TIP</h1>
        <p className="mt-2">
          If you are using MetaMask, ensure you have configured and selected the
          Localhost 8545 network.
        </p>
      </div>
      <p>After connecting your wallet, you should see this:</p>
      <img src={boilerplate2} alt="boilerplate" className="border" />
      <p>
        What's happening here is that the frontend code to show the current
        wallet's balance is detecting that the balance is 0, so you wouldn't be
        able to try the transfer functionality. By running:
      </p>
      <CodeSnippet
        code={snippet4}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>
        You'll run a custom Hardhat task we included that uses the balance of
        the deploying account to send 100 MHT and 1 ETH to your address. This
        will allow you to send tokens to another address. The transaction might
        take a few seconds before updating the balance visible in the frontend.
      </p>
      <p>
        You can check out the code for the task in{" "}
        <span className="text-tertiary">/tasks/faucet.js</span> , which is
        required from hardhat.config.js.
      </p>
      <CodeSnippet
        code={snippet5}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>In the terminal where you ran npx hardhat node you should also see:</p>
      <CodeSnippet
        code={snippet6}
        language="shell"
        showLineNumbers={true}
        isCopyable={true}
      />
      <p>
        Showing the console.log output from the transfer() function in our
        contract, and this is what the web app will look like after you run the
        faucet task:
      </p>
      <img src={boilerplate3} alt="boilerplate" className="border" />
      <p>
        Try playing around with it and reading the code. It's full of comments
        explaining what's going on and clearly indicating what code is Ethereum
        boilerplate and what's actually dApp logic. This should make the
        repository easy to reuse for your project.
      </p>
    </section>
  )
}

export default BoilerplateProject
